module EasyGL.Entity(Entity,readObj2Ent,obj2Ent,renderEnt) where

import qualified EasyGL.Obj.Obj as Obj
import qualified EasyGL.Shader as S
import qualified EasyGL.IndexedModel as IM

import Foreign.Marshal.Array
import Foreign.Ptr
import Foreign.Storable

import Graphics.UI.GLUT
import System.IO
import Control.Monad

bufferOffset :: Integral a => a -> Ptr b
bufferOffset = plusPtr nullPtr . fromIntegral

makeBufferObject target elems usage = do
  buffer <- genObjectName
  bindBuffer target $= Just buffer
  withArray elems $ \ptr -> do
    let size = fromIntegral ((length elems) * sizeOf (head elems))
    bufferData target $= (size, ptr, usage)
  return buffer

makeArrayBufferObject = do
  buffer <- genObjectName :: IO VertexArrayObject
  bindVertexArrayObject $= Just buffer
  return buffer

data SubEntity = SubEntity {
  vertexArrObject :: VertexArrayObject,
  normals :: BufferObject,
  vertexNum :: Int,
  vertexIndex :: Ptr GLuint,
  vertexIndexNum :: Int
} deriving (Show)

type Entity = [SubEntity]

indexedModel2Ent :: [IM.IndexedModel] -> IO Entity
indexedModel2Ent = mapM fromIM

fromIM :: IM.IndexedModel -> IO SubEntity
fromIM g = do
  triangles <- makeArrayBufferObject
  arrayBuffer <- makeBufferObject ArrayBuffer (IM.vertices g) StaticDraw
  indexArr <- newArray (IM.indexes g)
  return (SubEntity triangles arrayBuffer (length (IM.vertices g)) indexArr (length (IM.indexes g)))

readObj2Ent :: String -> IO Entity
readObj2Ent s = (Obj.readObj <$> readFile s) >>= indexedModel2Ent . map Obj.toIndexedModel . Obj.groups

obj2Ent :: Obj.Obj -> IO Entity
obj2Ent = indexedModel2Ent . map Obj.toIndexedModel . Obj.groups

renderEnt :: S.Shader -> Entity -> IO () -> IO ()
renderEnt shader ent shaderAction = S.withShader shader $ do
  shaderAction
  mapM_ renderSubEnt ent

renderSubEnt :: SubEntity -> IO ()
renderSubEnt e = do
  let firstIndex = 0
      vPosition = AttribLocation 0
  vertexAttribPointer vPosition $=
    (ToFloat, VertexArrayDescriptor 3 Float 0 (bufferOffset firstIndex))
  vertexAttribArray vPosition $= Enabled

  bindVertexArrayObject $= Just (vertexArrObject e)
  drawElements Triangles (fromIntegral.vertexIndexNum $ e) UnsignedInt (vertexIndex e)























--
