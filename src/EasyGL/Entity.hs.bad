module EasyGL.Entity(Entity,readObj2Ent,obj2Ent,renderEnt) where

import qualified EasyGL.Obj.Obj as Obj
import qualified EasyGL.Shader as S
import qualified EasyGL.IndexedModel as IM

import Foreign.Marshal.Array
import Foreign.Ptr
import Foreign.Storable

import Graphics.UI.GLUT
import System.IO
import Control.Monad
import Data.Maybe (maybe,fromJust)

bufferOffset :: Integral a => a -> Ptr b
bufferOffset = plusPtr nullPtr . fromIntegral

setVertexAttribPointer :: (GLuint,NumComponents) -> IO ()
setVertexAttribPointer (location,numComponents) = do
  let vPosition = AttribLocation location
  vertexAttribArray vPosition $= Enabled
  vertexAttribPointer vPosition $=
    (KeepIntegral, VertexArrayDescriptor numComponents Float 0 (bufferOffset 0))

cleanVertexAttribPointer :: (GLuint,NumComponents) -> IO ()
cleanVertexAttribPointer (location,_) = do
  let vPosition = AttribLocation location
  vertexAttribArray vPosition $= Disabled

makeBufferObject :: (Storable a) => BufferTarget -> [a] -> BufferUsage -> Maybe (GLuint,NumComponents) -> IO (BufferObject,IO (),IO ())
makeBufferObject target elems usage m = do
  --creating buffer
  buffer <- genObjectName --the same as glGenBuffer
  bindBuffer target $= Just buffer
  --filling buffer
  withArray elems $ \ptr -> do
    let size = fromIntegral ((length elems) * sizeOf (head elems))
    bufferData target $= (size, ptr, usage)
  --seting vertex attrib pointer to make aware of propiety
  let setEnvFun = maybe (return ()) setVertexAttribPointer m
      cleanUpFun = maybe (return ()) cleanVertexAttribPointer m
  return (buffer,setEnvFun,cleanUpFun)

makeArrayBufferObject :: IO VertexArrayObject
makeArrayBufferObject = do
  buffer <- genObjectName :: IO VertexArrayObject --the same as glGenVertexArrays
  bindVertexArrayObject $= Just buffer
  return buffer

data SubEntity = SubEntity {
  vertexArrObject :: VertexArrayObject,
  vertexes :: BufferObject,
  normals :: BufferObject,
  --indexBuffer :: BufferObject,
  vertexIndex :: Ptr GLuint,
  vertexNum :: Int,
  indexNum :: Int,
  setEnv :: IO (),
  cleanUp :: IO ()
}

type Entity = [SubEntity]

indexedModel2Ent :: [IM.IndexedModel] -> IO Entity
indexedModel2Ent = mapM fromIM

fromIM :: IM.IndexedModel -> IO SubEntity
fromIM g = do
  mesh <- makeArrayBufferObject
  -- sets vertices for buffer object
  (vertexBuffer,sf1,cf1) <- makeBufferObject ArrayBuffer (IM.vertices g) StaticDraw (Just (0,3))
  (normalBuffer,sf2,cf2) <- makeBufferObject ArrayBuffer (IM.normals g) StaticDraw (Just (2,3))
  --(indexBuffer,_,_) <- makeBufferObject ElementArrayBuffer (IM.indexes g) StaticDraw Nothing
  indexArr <- newArray (IM.indexes g)
  --bindVertexArrayObject $= Nothing
  return (SubEntity mesh vertexBuffer normalBuffer indexArr (length (IM.vertices g)) (length (IM.indexes g)) (sf1 >> sf2) (cf1 >> cf2))

readObj2Ent :: String -> IO Entity
readObj2Ent s = (Obj.readObj <$> readFile s) >>= indexedModel2Ent . map Obj.toIndexedModel . Obj.groups

obj2Ent :: Obj.Obj -> IO Entity
obj2Ent = indexedModel2Ent . map Obj.toIndexedModel . Obj.groups

renderEnt :: S.Shader -> Entity -> IO () -> IO ()
renderEnt shader ent shaderAction = S.withShader shader $ do
  shaderAction
  mapM_ renderSubEnt ent

renderSubEnt :: SubEntity -> IO ()
renderSubEnt e = do
  bindVertexArrayObject $= Just (vertexArrObject e)
  setEnv e
  --drawElementsBaseVertex Triangles (fromIntegral.indexNum $ e) UnsignedInt nullPtr 0
  drawElements Triangles (fromIntegral.indexNum $ e) UnsignedInt (vertexIndex e)
  --cleanUp e
  bindVertexArrayObject $= Nothing























--
